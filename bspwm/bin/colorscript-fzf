#!/usr/bin/env bash

# Check if running in Kitty terminal
if [ "$TERM" != "xterm-kitty" ]; then
    # If not, relaunch the script in a floating Kitty window with specific size
    exec kitty --class="floating_kitty" -o initial_window_width=110c -o initial_window_height=100c -e "$0" "$@"
fi

# Constants
COLOR_DIR="$HOME/.theme/colors"
CONFIG_DIR="$HOME/.config"
CACHE_FILE="/tmp/colorschemes_cache"
CACHE_TIMEOUT=3600  # Cache expires after 1 hour

# Function to list available color schemes with caching
list_colorschemes() {
    if [[ -f "$CACHE_FILE" ]] && [[ $(($(date +%s) - $(stat -c %Y "$CACHE_FILE"))) -lt $CACHE_TIMEOUT ]]; then
        cat "$CACHE_FILE"
    else
        find "$COLOR_DIR" -mindepth 1 -maxdepth 1 -type d -printf "%f\n" | sort | tee "$CACHE_FILE"
    fi
}

# Function to generate color preview
generate_preview() {
    local scheme="$1"
    local conf_file="$COLOR_DIR/$scheme/$scheme.conf"
    
    # Read the color values
    local -A colors
    while IFS='=' read -r key value; do
        colors[$key]=$value
    done < <(grep -E '^(background|foreground|color[0-7])=' "$conf_file")

    # Function to convert hex to RGB
    hex_to_rgb() {
        hex=${1#\#}
        printf "%d;%d;%d" 0x${hex:0:2} 0x${hex:2:2} 0x${hex:4:2}
    }

    # Display color blocks
    for key in background foreground color0 color1 color2 color3 color4 color5 color6 color7; do
        if [[ -n "${colors[$key]}" ]]; then
            rgb=$(hex_to_rgb "${colors[$key]}")
            printf "\033[48;2;%sm  \033[0m" "$rgb"
        fi
    done
    
    echo -e "\n$scheme"
}

# Function to select color scheme using fzf with preview
select_color() {
    list_colorschemes | fzf --prompt="Select color scheme: " --preview="$0 --preview {}" \
                            --preview-window=right:20%:wrap \
                            --height=100% --layout=reverse --border
}

# Function to read color values from .conf file
read_color_values() {
    local conf_file="$COLOR_DIR/$color/$color.conf"
    if [[ ! -f "$conf_file" ]]; then
        echo "Color configuration file not found: $conf_file"
        exit 1
    fi

    # Read color values
    background=$(grep '^background\b' "$conf_file" | awk '{print $2}')
    foreground=$(grep '^foreground\b' "$conf_file" | awk '{print $2}')
    color0=$(grep '^color0\b' "$conf_file" | awk '{print $2}')  # black
    color1=$(grep '^color1\b' "$conf_file" | awk '{print $2}')  # red
    color2=$(grep '^color2\b' "$conf_file" | awk '{print $2}')  # green
    color3=$(grep '^color3\b' "$conf_file" | awk '{print $2}')  # yellow
    color4=$(grep '^color4\b' "$conf_file" | awk '{print $2}')  # blue
    color5=$(grep '^color5\b' "$conf_file" | awk '{print $2}')  # magenta
    color6=$(grep '^color6\b' "$conf_file" | awk '{print $2}')  # cyan
    color7=$(grep '^color7\b' "$conf_file" | awk '{print $2}')  # white
}

# Function to generate feh background configuration
generate_fehbg() {
    echo "feh --no-fehbg --bg-fill $COLOR_DIR/$color/wall/" > "$HOME/.fehbg"
    chmod 755 "$HOME/.fehbg"
}

lockscreen() {
    echo "Updating lockscreen..."
    betterlockscreen -u "$COLOR_DIR/$color/wall"
}

# Function to update terminal colors
update_terminal_colors() {
    cp "$COLOR_DIR/$color/$color.conf" "$CONFIG_DIR/kitty/theme.conf"
    killall -SIGUSR1 kitty
}

# Function to update UI colors
update_ui_colors() {
    # Update BSPWM colors
    sed -i -e "s/bspc config normal_border_color .*/bspc config normal_border_color \"$color0\"/g" \
           -e "s/bspc config focused_border_color .*/bspc config focused_border_color \"$color4\"/g" \
           "$CONFIG_DIR/bspwm/config/decoration"

    # Update Polybar
    sed -i -e "s/background = .*/background = $background/g" \
        -i -e "s/foreground = .*/foreground = $foreground/g" \
        -i -e "s/accent = .*/accent = $color4/g" \
        -i -e "s/alert = .*/alert = $color1/g" \
        -i -e "s/red = .*/red = $color1/g" \
        -i -e "s/cyan = .*/cyan = $color6/g" \
        -i -e "s/blue = .*/blue = $color4/g" \
        -i -e "s/magenta = .*/magenta = $color5/g" \
        -i -e "s/yellow = .*/yellow = $color3/g" \
        -i -e "s/green = .*/green = $color2/g" \
        "$HOME/.config/polybar/colors.ini"

    # Update Dunst colors
    sed -i -e "s/background = .*/background = \"$background\"/g" \
           -e "s/foreground = .*/foreground = \"$foreground\"/g" \
           "$CONFIG_DIR/dunst/dunstrc"

    # Update BSPWM user options
    sed -i -e "s/bsp_color=.*/bsp_color=$color/g" "$CONFIG_DIR/bspwm/user/options"

    #Update BAT theme
    sed -i "s/--theme=\"[^\"]*\"/--theme=\"$color\"/" \
           "$CONFIG_DIR/bat/bat.conf"
}

generate_colors_fzf() {
    local fish_colors_file="$HOME/.config/fish/fzfcolors.fish"
    cat > "$fish_colors_file" << EOL
# Color configuration
set -g color_background $background
set -g color_foreground $foreground
set -g color_black $color0
set -g color_red $color1
set -g color_green $color2
set -g color_yellow $color3
set -g color_blue $color4
set -g color_magenta $color5
set -g color_cyan $color6
set -g color_white $color7

# Additional color mappings for fzf
set -g color_fg \$color_foreground
set -g color_bg \$color_background
set -g color_hl \$color_yellow
set -g color_fg_plus \$color_white
set -g color_bg_plus \$color_black
set -g color_hl_plus \$color_yellow
set -g color_border \$color_black
set -g color_header \$color_blue
set -g color_gutter \$color_background
set -g color_spinner \$color_yellow
set -g color_info \$color_cyan
set -g color_pointer \$color_magenta
set -g color_marker \$color_red
set -g color_prompt \$color_foreground
EOL
}

# Function to restart necessary services
restart_services() {
    bspc wm -r
    pkill -USR1 -x sxhkd
#    pkill -USR1 -x polybar
    sleep 1
}

# Main function
main() {
    if [[ "$1" == "--preview" ]]; then
        generate_preview "$2"
        exit 0
    fi

    color=$(select_color)

    # Exit if no color scheme was selected
    [[ -z "$color" ]] && exit 0

    # Check if the selected color scheme exists
    [[ -d "$COLOR_DIR/$color" ]] || { echo "Invalid color scheme: $color"; exit 1; }

    # Call the function to read color values
    read_color_values

    generate_fehbg
    #lockscreen
    update_terminal_colors
    update_ui_colors
    generate_colors_fzf
    restart_services

    echo "Color scheme changed to $color. Press any key to exit."
    read -n 1 -s
}

# Run the main function
main "$@"
exit 0

